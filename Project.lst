Microsoft (R) Macro Assembler Version 14.35.32216.1	    03/01/24 16:00:45
Assignment4 (hw4.asm					     Page 1 - 1


				TITLE Assignment4 (hw4.asm)

				; Troy Lopez
				; CS 271 Assignment4 2/28/24
				; generate array of random numbers based on user input
				; then sort and display some stats

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 000000C8			UPPLIM		EQU		200
 = 0000000A			LOWLIM		EQU		10
 = 00000001			ZERO		EQU		1
 = 000003E7			THOUS		EQU		999
 = 000000C9			MAX_SIZE	EQU		201	; needs to be + 1 to avoid memory addresses getting tangled in
 = 00000004			FOUR		EQU		4


 00000000			.data
					; variable definitions
					; Notion:
					; prThing prints
					; usThing input

 00000000 48 57 34 3A 20		prIntro1	BYTE	"HW4: Sorting random numbers, by Troy Lopez",0
	   53 6F 72 74 69
	   6E 67 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 2C 20 62
	   79 20 54 72 6F
	   79 20 4C 6F 70
	   65 7A 00
 0000002B 54 68 69 73 20		prIntro2	BYTE	"This generates N numbers in range [lo, hi], and displays, sorts, and displays again. Then, median value is calculated and displahyed.",0
	   67 65 6E 65 72
	   61 74 65 73 20
	   4E 20 6E 75 6D
	   62 65 72 73 20
	   69 6E 20 72 61
	   6E 67 65 20 5B
	   6C 6F 2C 20 68
	   69 5D 2C 20 61
	   6E 64 20 64 69
	   73 70 6C 61 79
	   73 2C 20 73 6F
	   72 74 73 2C 20
	   61 6E 64 20 64
	   69 73 70 6C 61
	   79 73 20 61 67
	   61 69 6E 2E 20
	   54 68 65 6E 2C
	   20 6D 65 64 69
	   61 6E 20 76 61
	   6C 75 65 20 69
	   73 20 63 61 6C
	   63 75 6C 61 74
	   65 64 20 61 6E
	   64 20 64 69 73
	   70 6C 61 68 79
	   65 64 2E 00

 000000B1 48 6F 77 20 6D		prData1		BYTE	"How many numbers should be generated? [10, 200]: ",0
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 6F
	   75 6C 64 20 62
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 3F 20 5B 31
	   30 2C 20 32 30
	   30 5D 3A 20 00
 000000E3 00000045			usNum		DWORD	69
 000000E7 49 6E 76 61 6C		prErr1		BYTE	"Invalid Input, please try again.",0
	   69 64 20 49 6E
	   70 75 74 2C 20
	   70 6C 65 61 73
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 2E 00
 00000108 45 6E 74 65 72		prData2		BYTE	"Enter Lower bound (lo): ",0
	   20 4C 6F 77 65
	   72 20 62 6F 75
	   6E 64 20 28 6C
	   6F 29 3A 20 00
 00000121 000001A4			usLo		DWORD	420
 00000125 45 6E 74 65 72		prData3		BYTE	"Enter Upper bound (hi): ",0
	   20 55 70 70 65
	   72 20 62 6F 75
	   6E 64 20 28 68
	   69 29 3A 20 00
 0000013E 00001CA3			usHi		DWORD	7331

 00000142  000000C9 [			array		DWORD	MAX_SIZE	DUP(?)	;the array, intially full of garbage
	    00000000
	   ]

 00000466 54 68 65 20 75		prArr1		BYTE	"The unsorted random numbers: ",0
	   6E 73 6F 72 74
	   65 64 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 3A 20 00
 00000484 54 68 65 20 73		prArr2		BYTE	"The sorted random numbers:",0
	   6F 72 74 65 64
	   20 72 61 6E 64
	   6F 6D 20 6E 75
	   6D 62 65 72 73
	   3A 00
 0000049F 20 20 20 00			space		BYTE	"   ",0
 000004A3 2E 35 00			pointfive	BYTE	".5",0

 000004A6 00000000			flag		DWORD	0

 000004AA 54 68 65 20 6D		prMed		BYTE	"The median value: ",0
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 3A 20 00

 000004BD 57 6F 75 6C 64		prAgain		BYTE	"Would you like to go again? (1/0)",0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 67 6F
	   20 61 67 61 69
	   6E 3F 20 28 31
	   2F 30 29 00
 000004DF 43 6C 6F 73 69		bye	        BYTE    "Closing program. Goodbye",0
	   6E 67 20 70 72
	   6F 67 72 61 6D
	   2E 20 47 6F 6F
	   64 62 79 65 00

 00000000			.code

				; main access point, where all other logic stems from
 00000000			main PROC
 00000000  E8 00000091			call intro

 00000005  68 000000E3 R		push	OFFSET usNum
 0000000A  68 00000121 R		push	OFFSET usLo
 0000000F  68 0000013E R		Push	OFFSET usHi
 00000014  E8 000000A1			call	getData
					
 00000019  FF 35 00000121 R		Push	usLo
 0000001F  FF 35 0000013E R		Push	usHi
 00000025  68 00000142 R		push	OFFSET	array
 0000002A  FF 35 000000E3 R		push	usNum
 00000030  E8 00000127			call	fillArray

 00000035  FF 35 000000E3 R		Push	usNum
 0000003B  68 00000142 R		Push	OFFSET	array
 00000040  68 00000466 R		Push	OFFSET	prArr1
 00000045  E8 00000135			CALL	printList
 0000004A  E8 00000000 E		CALL	CRLF

 0000004F  FF 35 000004A6 R		Push	flag
 00000055  FF 35 000000E3 R		Push	usNum
 0000005B  68 00000142 R		Push	OFFSET	array
					;CALL	bubbleSort	; this is defunct and only persists for historical purposes
 00000060  E8 00000195			CALL	sorting
					
 00000065  FF 35 000000E3 R		Push	usNum
 0000006B  68 00000142 R		Push	OFFSET	array
 00000070  68 00000484 R		Push	OFFSET	prArr2
 00000075  E8 00000105			CALL	printList

 0000007A  FF 35 000000E3 R		push	usNum
 00000080  68 00000142 R		push	OFFSET array
 00000085  E8 0000019F			call	median

 0000008A  E8 00000219			call	goAgain

					exit
 0000008F  6A 00	   *	    push   +000000000h
 00000091  E8 00000000 E   *	    call   ExitProcess
 00000096			main ENDP

				; print intro, via edx. no pre/post conditions, no paramaters.
 00000096			intro PROC
 00000096  BA 00000000 R		mov		edx, OFFSET	prIntro1
 0000009B  E8 00000000 E		call	WRITESTRING
 000000A0  E8 00000000 E		call	CRLF
 000000A5  BA 0000002B R		mov		edx, OFFSET prIntro2
 000000AA  E8 00000000 E		call	WRITESTRING
 000000AF  E8 00000000 E		call	CRLF
 000000B4  E8 00000000 E		call	CRLF
 000000B9  C3				ret
 000000BA			intro ENDP

				; prints out requests for, and then validates, input. takes usLo, usHi, and usNum.
				; touches ebp, esp, ebx, edx, eax, [ebx], ecx.
				; this could be further optimized to be called 3x, once for each inputted value, but for the sake of my 
				; sanity is handled like this
				; afterwards params will be populated
 000000BA			getData	PROC
 000000BA  55					PUSH	ebp
 000000BB  8B EC				MOV		ebp, esp	;frame

 000000BD				getNum:
 000000BD  8B 5D 10				mov		ebx, [ebp+16]
 000000C0  BA 000000B1 R			mov		edx, OFFSET	prData1
 000000C5  E8 00000000 E			call	WRITESTRING
 000000CA  E8 00000000 E			call	READINT
 000000CF  89 03				mov		[ebx], eax	;store input in usNum?
						; shitty validation to be improved if I have time
 000000D1  83 F8 0A				cmp		eax, LOWLIM
 000000D4  7C 09				jl		invalidNum
 000000D6  3D 000000C8				cmp		eax, UPPLIM
 000000DB  7F 02				jg		invalidNum

 000000DD  EB 11				jmp		getLo

 000000DF				invalidNum:
 000000DF  BA 000000E7 R			mov		edx, OFFSET prErr1
 000000E4  E8 00000000 E			CALL	WRITESTRING
 000000E9  E8 00000000 E			CALL	CRLF
 000000EE  EB CD				jmp		getNum

 000000F0				getLo:
 000000F0  8B 5D 0C				mov		ebx, [ebp+12]
 000000F3  BA 00000108 R			mov		edx, OFFSET	prData2
 000000F8  E8 00000000 E			call	WRITESTRING
 000000FD  E8 00000000 E			call	READINT
 00000102  89 03				mov		[ebx], eax	;store input in usNum?
						; shitty validation to be improved if I have time
						
 00000104  83 F8 01				cmp		eax, ZERO
 00000107  7C 09				jl		invalidLo
 00000109  3D 000003E7				cmp		eax, THOUS
 0000010E  7F 02				jg		invalidLo

 00000110  EB 11				jmp		getHi

 00000112				invalidLo:
 00000112  BA 000000E7 R			mov		edx, OFFSET prErr1
 00000117  E8 00000000 E			CALL	WRITESTRING
 0000011C  E8 00000000 E			CALL	CRLF
 00000121  EB CD				jmp		getLo

 00000123				getHi:
 00000123  8B 5D 08				mov		ebx, [ebp+8] ; hi, inputted
 00000126  8B 4D 0C				mov		ecx, [ebp+12] ;lo
 00000129  BA 00000125 R			mov		edx, OFFSET	prData3
 0000012E  E8 00000000 E			call	WRITESTRING
 00000133  E8 00000000 E			call	READINT
 00000138  89 03				mov		[ebx], eax	;store input in usNum?
						; shitty validation to be improved if I have time
 0000013A  3B 01				cmp		eax,[ecx]
 0000013C  7C 09				jl		invalidHi
 0000013E  3D 000003E7				cmp		eax, THOUS
 00000143  7F 02				jg		invalidHi

 00000145  EB 11				jmp		ending

 00000147				invalidHi:
 00000147  BA 000000E7 R			mov		edx, OFFSET prErr1
 0000014C  E8 00000000 E			CALL	WRITESTRING
 00000151  E8 00000000 E			CALL	CRLF
 00000156  EB CB				jmp		getHi

 00000158				ending:
 00000158  5D					pop		ebp
 00000159  C2 000C				ret		12
 0000015C			getData		ENDP

				; populates the array with usNum values between usLo and usHi. Those are also the paramaters (array is PBR).
				; requires paramaters are correctly populated. Afterwards the array will contain random values to sort out.
				; touches ebp, esp, ecx, edi, eax, [edi]. uses a looop to smooth the proccess.
 0000015C			fillArray	PROC
 0000015C  55					PUSH	ebp
 0000015D  8B EC				MOV		ebp, esp	;frame

						; get usNum for loop counter
 0000015F  8B 4D 08				mov		ecx, [ebp+8];
						
						;get array into edi
 00000162  8B 7D 0C				mov		edi, [ebp+12]

 00000165					again:	;the loop
 00000165  8B 45 10					mov		eax, [ebp+16]	;get upper limit
 00000168  2B 45 14					sub		eax, [ebp+20]	;sub low
 0000016B  40						inc		eax		; b/c exclusive
 0000016C  E8 00000000 E				call	RANDOMRANGE	;[0, eax]
 00000171  03 45 14					add		eax, [ebp+20]
							; code above this line works and indexes are correct

							; populate array
 00000174  89 07					mov		[edi], eax
							;CALL	WRITEINT
							;CALL	CRLF
 00000176  83 C7 04					add		edi, 4

 00000179  E2 EA					loop again

 0000017B  5D						pop ebp
 0000017C  C2 0010					ret	16
 0000017F			fillArray	ENDP


				; print out the title paramater and the the contents of the array paramater, 10 per line. 
				; requires both params to be populated, but doesn''t actually mutuate anyhting.
				; touches ebp, esp, ecx, esi, ebx, eax, edx
 0000017F			printList	PROC
 0000017F  55					PUSH	ebp
 00000180  8B EC				MOV		ebp, esp	;frame
						
 00000182  8B 55 08				mov		edx, [ebp+8]	;title
 00000185  E8 00000000 E			CALL	WRITESTRING
 0000018A  E8 00000000 E			CALL	CRLF
						; above works

 0000018F  8B 4D 10				mov		ecx, [ebp+16]	;total items
 00000192  8B 75 0C				mov		esi, [ebp+12]	;the array

 00000195  BB 00000000				mov		ebx, 0	;line counter


 0000019A					again:	;the loop
 0000019A  43						inc		ebx
 0000019B  83 FB 0B					cmp		ebx, 11
 0000019E  74 02					je		newline
 000001A0  EB 0A					jmp		print

 000001A2						newline:
 000001A2  E8 00000000 E					call	CRLF
 000001A7  BB 00000001						mov		ebx, 1

 000001AC						print:
 000001AC  8B 06						mov		eax, [esi]
 000001AE  E8 00000000 E					call	writedec
 000001B3  BA 0000049F R					mov		edx, OFFSET space	; for spacing
 000001B8  E8 00000000 E					call	writestring
 000001BD  83 C6 04						add		esi, 4
 000001C0  E2 D8						loop	again

 000001C2					ending:
 000001C2  5D						pop		ebp
 000001C3  C2 000C					ret		12
 000001C6			printList	ENDP		

				; this is defunct, here be dragons
 000001C6			bubbleSort	PROC

 000001C6  55				PUSH	ebp
 000001C7  8B EC			MOV		ebp, esp
					
 000001C9  8B 7D 08			mov		edi, [ebp+8]


					; flag is stored at +16
					; num is stored at +12
					; array is stored at +8


 000001CC  8B 4D 0C			mov		ecx, [ebp + 12]	; works

 000001CF				outer:
 000001CF  B8 00000000				mov		eax, 0
 000001D4  89 45 10				mov		[ebp + 16], eax		;should work
						
 000001D7  51					push	ecx		; save for loop. outer i is now stored in +4
 000001D8  49					dec		ecx		; start inner loop from one less
 000001D9					inner:
							; if statement goes here
							; i = [ebp - 4]
							; j = ecx
 000001D9  8B 45 FC					mov		eax,	[ebp - 4]
 000001DC  BA 00000004					mov		edx, FOUR
 000001E1  F7 E2					mul		edx
 000001E3  8B D8					mov		ebx, eax		; i is in ebx


 000001E5  8B C1					mov		eax, ecx
 000001E7  BA 00000004					mov		edx, FOUR
 000001EC  F7 E2					mul		edx			; j is in eax

 000001EE  8B 04 07					mov		eax, [edi+eax]
 000001F1  8B 1C 1F					mov		ebx, [edi+ebx]
 000001F4  3B C3					cmp		eax, ebx

 000001F6						swap:
								;stuff goes here
								
 000001F6  E2 E1					loop inner
						;jmp else

						;notswapped:
							; break out of outer
						
						;else:
						;	pop		ecx
						;	loop	outer
							

						

							


 000001F8  5D				pop		ebp
 000001F9  C3				ret
 000001FA			bubbleSort	ENDP
							

				; sort given array with size num. takes in array and num as paramaters, and requires the array is populated with num values
				; this will sort the array (by reference) using what should be pretty similiar to bubble sort
				; but is slightly haunted by caffiene and having been written at 1am.
				; I appreciate your patience with grading this.
				; touches ebp, esp, eax, ecx, esi
				; after running array will be sorted highest to lowest
 000001FA			sorting		PROC
					; flag is stored at +16 but isn't used right now'
					; num is stored at +12
					; array is stored at +8
 000001FA  55				push	ebp
 000001FB  8B EC			mov		ebp, esp

 000001FD  8B 45 0C			mov		eax, [ebp+12]
 00000200  8B C8			mov		ecx, eax		; put user num in loop counter for outer loop

 00000202  8B 75 08			mov		esi, [ebp+8]	; put array in esi

					;inc		ecx		; start from 1 in from end

 00000205				outer:
 00000205  51					push	ecx		;save for later
 00000206  8B 4D 0C				mov		ecx, [ebp+12]	;get user num again
 00000209  8B 75 08				mov		esi, [ebp+8]	; load arr again from start

 0000020C					inner:
 0000020C  8B 06					mov		eax, [esi]		;arr to esi
 0000020E  39 46 04					cmp		[esi+4], eax	;check against next index
 00000211  7C 0A					jl		contd	; don''t swap
							; swap goes here
 00000213  8B 06					mov		eax, [esi]
 00000215  8B 5E 04					mov		ebx, [esi+4]
 00000218  89 1E					mov		[esi], ebx
 0000021A  89 46 04					mov		[esi+4], eax

 0000021D						contd:
 0000021D  83 C6 04						add		esi, 4
 00000220  E2 EA						loop	inner
 00000222  59							pop		ecx		; restore outer loop
 00000223  E2 E0						loop	outer

 00000225  5D				pop		ebp
 00000226  C2 000C			ret		12
 00000229			sorting endp

				; finds the median value in paramater array by dividing the size (also a param) in two
				; just prints, doesn't mutate anything'
				; uses ebp, esp, eax, esi, edx
				; cases where no median exist are handled by averaging the 2 closest values, 
				; and adding a ".5" as neccesary
				; slightly mispelled labels are to avoid naming overlaps.
 00000229			median	proc
 00000229  55				push	ebp
 0000022A  8B EC			mov		ebp, esp

					; array is 8
					; size is 12

 0000022C  8B 45 0C			mov		eax, [ebp+12]	;l size to eax
 0000022F  8B 75 08			mov		esi, [ebp+8]	; put array in esi

 00000232  BA 00000000			mov		edx, 0

 00000237  BB 00000002			mov		ebx, 2
 0000023C  F7 F3			div		ebx	;eax / 2
 0000023E  83 FA 01			cmp		edx, 1	;remainder
 00000241  74 02			je		oddd
 00000243  EB 16			jmp		evenn

 00000245				oddd:	
						; target is in eax
 00000245  BB 00000004				mov		ebx, four
 0000024A  F7 E3				mul		ebx
 0000024C  E8 00000000 E			call	crlf
 00000251  8B 04 06				mov		eax,  [esi + eax]
 00000254  E8 00000000 E			call	writedec
 00000259  EB 48				jmp		outside		; like end but w/ a different name
 0000025B				evenn:
						; target is in eax
 0000025B  48					dec		eax		; step into middle
 0000025C  BB 00000004				mov		ebx, four
 00000261  F7 E3				mul		ebx		; to properly index the array of dwords
 00000263  8B D8				mov		ebx, eax
 00000265  E8 00000000 E			call	crlf
 0000026A  8B 04 1E				mov		eax,  [esi + ebx]
 0000026D  83 C3 04				add		ebx, four
 00000270  03 04 1E				add		eax, [esi + ebx]	;get next as well
 00000273  BB 00000002				mov		ebx, 2
 00000278  F7 F3				div		ebx	; mean of 2 closest to median in eax, but may need a .5
 0000027A  83 FA 01				cmp		edx, 1	;remainder
 0000027D  74 02				je		addfive
 0000027F  EB 16				jmp		print

 00000281					addfive:	; add a .5 to neccessary values
 00000281  E8 00000000 E				call	crlf
 00000286  E8 00000000 E				call	writedec
 0000028B  BA 000004A3 R				mov		edx, OFFSET	pointfive
 00000290  E8 00000000 E				call	writestring
 00000295  EB 0C					jmp		outside

 00000297					print:
 00000297  E8 00000000 E				call	crlf
 0000029C  E8 00000000 E				call	writedec
 000002A1  EB 00					jmp		outside

 000002A3				outside:
 000002A3  5D					pop		ebp
 000002A4  C3					ret
					
 000002A5  C2 0008			ret 8
 000002A8			median	endp

				; asks if user wants to repeat program. uses EDX, EAX. no strict PREC. Post: user returns to main or restarts main.
 000002A8			goAgain PROC
 000002A8  E8 00000000 E	    call    Crlf
 000002AD  BA 000004BD R	    mov     edx, OFFSET prAgain
 000002B2  E8 00000000 E		call    WriteString
 000002B7  E8 00000000 E		call    Crlf

 000002BC  E8 00000000 E		call	ReadInt		                ;get input
 000002C1  E8 00000000 E		call	Crlf

					; 8.1 check user input
 000002C6  83 F8 00			cmp eax, 0		            ;Important, check against int, not char
 000002C9  75 01			jne restart                    ; jump to doCalcs if usAgain is not equal to 0
 000002CB  C3			    RET

 000002CC			    restart:
 000002CC  E8 FFFFFD2F		        CALL    main    ;restart program
 000002D1			goagain ENDP


				; end program. EDX. PREC: user got here by choosing no in goAgain. Post: program exits.
 000002D1			theEnd PROC
 000002D1  BA 000004DF R		mov edx, OFFSET bye
 000002D6  E8 00000000 E		call WriteString
				    EXIT    ;shoot self in foot to exit early so main doesnt call this multiple times
 000002DB  6A 00	   *	    push   +000000000h
 000002DD  E8 00000000 E   *	    call   ExitProcess
 000002E2			theEnd ENDP



				END main
Microsoft (R) Macro Assembler Version 14.35.32216.1	    03/01/24 16:00:45
Assignment4 (hw4.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004F8 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002E2 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
bubbleSort . . . . . . . . . . .	P Near	 000001C6 _TEXT	Length= 00000034 Public STDCALL
  outer  . . . . . . . . . . . .	L Near	 000001CF _TEXT	
  inner  . . . . . . . . . . . .	L Near	 000001D9 _TEXT	
  swap . . . . . . . . . . . . .	L Near	 000001F6 _TEXT	
fillArray  . . . . . . . . . . .	P Near	 0000015C _TEXT	Length= 00000023 Public STDCALL
  again  . . . . . . . . . . . .	L Near	 00000165 _TEXT	
getData  . . . . . . . . . . . .	P Near	 000000BA _TEXT	Length= 000000A2 Public STDCALL
  getNum . . . . . . . . . . . .	L Near	 000000BD _TEXT	
  invalidNum . . . . . . . . . .	L Near	 000000DF _TEXT	
  getLo  . . . . . . . . . . . .	L Near	 000000F0 _TEXT	
  invalidLo  . . . . . . . . . .	L Near	 00000112 _TEXT	
  getHi  . . . . . . . . . . . .	L Near	 00000123 _TEXT	
  invalidHi  . . . . . . . . . .	L Near	 00000147 _TEXT	
  ending . . . . . . . . . . . .	L Near	 00000158 _TEXT	
goAgain  . . . . . . . . . . . .	P Near	 000002A8 _TEXT	Length= 00000029 Public STDCALL
  restart  . . . . . . . . . . .	L Near	 000002CC _TEXT	
intro  . . . . . . . . . . . . .	P Near	 00000096 _TEXT	Length= 00000024 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000096 Public STDCALL
median . . . . . . . . . . . . .	P Near	 00000229 _TEXT	Length= 0000007F Public STDCALL
  oddd . . . . . . . . . . . . .	L Near	 00000245 _TEXT	
  evenn  . . . . . . . . . . . .	L Near	 0000025B _TEXT	
  addfive  . . . . . . . . . . .	L Near	 00000281 _TEXT	
  print  . . . . . . . . . . . .	L Near	 00000297 _TEXT	
  outside  . . . . . . . . . . .	L Near	 000002A3 _TEXT	
printList  . . . . . . . . . . .	P Near	 0000017F _TEXT	Length= 00000047 Public STDCALL
  again  . . . . . . . . . . . .	L Near	 0000019A _TEXT	
  newline  . . . . . . . . . . .	L Near	 000001A2 _TEXT	
  print  . . . . . . . . . . . .	L Near	 000001AC _TEXT	
  ending . . . . . . . . . . . .	L Near	 000001C2 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sorting  . . . . . . . . . . . .	P Near	 000001FA _TEXT	Length= 0000002F Public STDCALL
  outer  . . . . . . . . . . . .	L Near	 00000205 _TEXT	
  inner  . . . . . . . . . . . .	L Near	 0000020C _TEXT	
  contd  . . . . . . . . . . . .	L Near	 0000021D _TEXT	
theEnd . . . . . . . . . . . . .	P Near	 000002D1 _TEXT	Length= 00000011 Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FOUR . . . . . . . . . . . . . .	Number	 00000004h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOWLIM . . . . . . . . . . . . .	Number	 0000000Ah   
MAX_SIZE . . . . . . . . . . . .	Number	 000000C9h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
THOUS  . . . . . . . . . . . . .	Number	 000003E7h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UPPLIM . . . . . . . . . . . . .	Number	 000000C8h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ZERO . . . . . . . . . . . . . .	Number	 00000001h   
array  . . . . . . . . . . . . .	DWord	 00000142 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bye  . . . . . . . . . . . . . .	Byte	 000004DF _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
flag . . . . . . . . . . . . . .	DWord	 000004A6 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
pointfive  . . . . . . . . . . .	Byte	 000004A3 _DATA	
prAgain  . . . . . . . . . . . .	Byte	 000004BD _DATA	
prArr1 . . . . . . . . . . . . .	Byte	 00000466 _DATA	
prArr2 . . . . . . . . . . . . .	Byte	 00000484 _DATA	
prData1  . . . . . . . . . . . .	Byte	 000000B1 _DATA	
prData2  . . . . . . . . . . . .	Byte	 00000108 _DATA	
prData3  . . . . . . . . . . . .	Byte	 00000125 _DATA	
prErr1 . . . . . . . . . . . . .	Byte	 000000E7 _DATA	
prIntro1 . . . . . . . . . . . .	Byte	 00000000 _DATA	
prIntro2 . . . . . . . . . . . .	Byte	 0000002B _DATA	
prMed  . . . . . . . . . . . . .	Byte	 000004AA _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 0000049F _DATA	
usHi . . . . . . . . . . . . . .	DWord	 0000013E _DATA	
usLo . . . . . . . . . . . . . .	DWord	 00000121 _DATA	
usNum  . . . . . . . . . . . . .	DWord	 000000E3 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
