Microsoft (R) Macro Assembler Version 14.35.32216.1	    02/01/24 15:12:00
Assignment2 (hw2.asm					     Page 1 - 1


				TITLE Assignment2 (hw2.asm)

				; Troy Lopez
				; CS 271 Assignment1     1/18/24
				; Gets user input and calculates factors

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; constants go here
				;COLON   equ ": ",0
 = 000003E9			LIM     equ 1001    ; 1001 so check can be inclusive

 00000000			.data
				    ; variable definitions
				    ; Notation:
				    ; prThing is a string to be printed
				    ; usThing is a user inputted value
				    ; with the exception of intro, all values not prefixed by pr or us are the results of calcs

 00000000 48 77 32 3A 20	    intro1  BYTE "Hw2: Factors, by Troy Lopez", 0
	   46 61 63 74 6F
	   72 73 2C 20 62
	   79 20 54 72 6F
	   79 20 4C 6F 70
	   65 7A 00
 0000001C 54 68 69 73 20	    intro2  BYTE "This program calculates and displays the factors of numbers between upper and lower bounds, as well as when numbers are prime.", 0
	   70 72 6F 67 72
	   61 6D 20 63 61
	   6C 63 75 6C 61
	   74 65 73 20 61
	   6E 64 20 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 66 61 63 74
	   6F 72 73 20 6F
	   66 20 6E 75 6D
	   62 65 72 73 20
	   62 65 74 77 65
	   65 6E 20 75 70
	   70 65 72 20 61
	   6E 64 20 6C 6F
	   77 65 72 20 62
	   6F 75 6E 64 73
	   2C 20 61 73 20
	   77 65 6C 6C 20
	   61 73 20 77 68
	   65 6E 20 6E 75
	   6D 62 65 72 73
	   20 61 72 65 20
	   70 72 69 6D 65
	   2E 00
				    
 0000009B 45 6E 74 65 72	    prName  BYTE "Enter your name: ", 0
	   20 79 6F 75 72
	   20 6E 61 6D 65
	   3A 20 00
 000000AD 45 6E 74 65 72	    prLowr  BYTE "Enter a number between 1 and 1000 for the lower range: ", 0
	   20 61 20 6E 75
	   6D 62 65 72 20
	   62 65 74 77 65
	   65 6E 20 31 20
	   61 6E 64 20 31
	   30 30 30 20 66
	   6F 72 20 74 68
	   65 20 6C 6F 77
	   65 72 20 72 61
	   6E 67 65 3A 20
	   00
 000000E5 45 6E 74 65 72	    prHigh  BYTE "Enter a number between 1 and 1000 for the higher range: ", 0
	   20 61 20 6E 75
	   6D 62 65 72 20
	   62 65 74 77 65
	   65 6E 20 31 20
	   61 6E 64 20 31
	   30 30 30 20 66
	   6F 72 20 74 68
	   65 20 68 69 67
	   68 65 72 20 72
	   61 6E 67 65 3A
	   20 00
 0000011E 57 6F 75 6C 64	    prAgin  BYTE "Would you like to do another calculation? (1 yes/0 no)", 0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 64 6F
	   20 61 6E 6F 74
	   68 65 72 20 63
	   61 6C 63 75 6C
	   61 74 69 6F 6E
	   3F 20 28 31 20
	   79 65 73 2F 30
	   20 6E 6F 29 00
 00000155 53 6F 72 72 79	    prLoLo  BYTE "Sorry, that value is too low, please try again", 0
	   2C 20 74 68 61
	   74 20 76 61 6C
	   75 65 20 69 73
	   20 74 6F 6F 20
	   6C 6F 77 2C 20
	   70 6C 65 61 73
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 00
 00000184 53 6F 72 72 79	    prHiLo  BYTE "Sorry, that value is too high, please try again", 0
	   2C 20 74 68 61
	   74 20 76 61 6C
	   75 65 20 69 73
	   20 74 6F 6F 20
	   68 69 67 68 2C
	   20 70 6C 65 61
	   73 65 20 74 72
	   79 20 61 67 61
	   69 6E 00
 000001B4 49 6E 70 75 74	    prLoHi  BYTE "Input must be >= lower bound, please try again", 0
	   20 6D 75 73 74
	   20 62 65 20 3E
	   3D 20 6C 6F 77
	   65 72 20 62 6F
	   75 6E 64 2C 20
	   70 6C 65 61 73
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 00
 000001E3 2A 2A 2A 20 50	    prPrime BYTE "*** PRIME NUMBER ***",0
	   52 49 4D 45 20
	   4E 55 4D 42 45
	   52 20 2A 2A 2A
	   00
 000001F8 57 6F 75 6C 64	    prAgain	BYTE "Would you like to do another calc? (0 = no / 1 = yes): ", 0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 64 6F
	   20 61 6E 6F 74
	   68 65 72 20 63
	   61 6C 63 3F 20
	   28 30 20 3D 20
	   6E 6F 20 2F 20
	   31 20 3D 20 79
	   65 73 29 3A 20
	   00
 00000230 47 6F 6F 64 62		prExit	BYTE "Goodbye ", 0
	   79 65 20 00
				   
 00000239  00000021 [		    usName  BYTE 33 DUP(0)
	    00
	   ]
 0000025A 00000000		    usLowr  DWORD ?
 0000025E 00000000		    usHigh  DWORD ?
 00000262 00000000		   	usAgain DWORD ?

 00000266 00000000		    loopCt  DWORD ?
 0000026A 3A 20 00		    colon   BYTE ": ",0
 0000026D 20 00			    space   BYTE " ",0
 0000026F 0000			    flag    WORD 0

 00000000			.code
 00000000			main PROC

				    ; intro program
 00000000  BA 00000000 R	    mov     edx, OFFSET intro1
 00000005  E8 00000000 E	    call    WriteString
 0000000A  E8 00000000 E	    call    Crlf
 0000000F  BA 0000001C R	    mov     edx, OFFSET intro2
 00000014  E8 00000000 E	    call    WriteString
 00000019  E8 00000000 E	    call    Crlf

				    ; get name
 0000001E  BA 0000009B R	    mov     edx, OFFSET prName
 00000023  E8 00000000 E	    call    WriteString
				    
 00000028  BA 00000239 R	    mov     edx, OFFSET usName
 0000002D  B9 00000020		    mov     ecx, 32
 00000032  E8 00000000 E	    call    ReadString
 00000037  E8 00000000 E	    call    Crlf


				    ; get lower bound
 0000003C			getLower:
 0000003C  BA 000000AD R	    mov     edx, OFFSET prLowr
 00000041  E8 00000000 E	    call    WriteString
				    
 00000046  E8 00000000 E	    call    ReadInt             ; stores in eax
 0000004B  A3 0000025A R	    mov     usLowr, eax
 00000050  E8 00000000 E	    call    Crlf
				    
				    ; check if too low
 00000055  83 3D 0000025A R	    cmp     usLowr, 1
	   01
 0000005C  7C 0E		    jl      lowerTooLow         ; if below 1
				    
 0000005E  81 3D 0000025A R	    cmp     usLowr, 1000
	   000003E8
 00000068  7F 13		    jg      lowerTooHigh
 0000006A  EB 22		    jmp     getHigher


				    ; if user input for lower bound is too low
 0000006C			lowerTooLow:
 0000006C  BA 00000155 R	    mov     edx, OFFSET prLoLo
 00000071  E8 00000000 E	    call    WriteString
 00000076  E8 00000000 E	    call    Crlf
 0000007B  EB BF		    jmp     getLower


				    ; if too high
 0000007D			lowerTooHigh:
 0000007D  BA 00000184 R	    mov     edx, OFFSET prHiLo
 00000082  E8 00000000 E	    call    WriteString
 00000087  E8 00000000 E	    call    Crlf
 0000008C  EB AE		    jmp     getLower

				    ; get higher bound
 0000008E			getHigher:
 0000008E  BA 000000E5 R	    mov     edx, OFFSET prHigh
 00000093  E8 00000000 E	    call    WriteString
				    
 00000098  E8 00000000 E	    call    ReadInt             ; stores in eax
 0000009D  A3 0000025E R	    mov     usHigh, eax
 000000A2  E8 00000000 E	    call    Crlf
				    
				    ; check if too low
 000000A7  A1 0000025A R	    mov     eax, usLowr
 000000AC  39 05 0000025E R	    cmp     usHigh, eax
 000000B2  7C 0E		    jl      higherTooLow       ; if below lower bound
				    
 000000B4  81 3D 0000025E R	    cmp     usHigh, LIM
	   000003E9
 000000BE  7F 13		    jg      higherTooHigh
 000000C0  EB 22		    jmp     prepMath


				    ; if user input for lower bound is too low
 000000C2			higherTooLow:
 000000C2  BA 000001B4 R	    mov     edx, OFFSET prLoHi
 000000C7  E8 00000000 E	    call    WriteString
 000000CC  E8 00000000 E	    call    Crlf
 000000D1  EB BB		    jmp     getHigher


				    ; if too high
 000000D3			higherTooHigh:
 000000D3  BA 00000184 R	    mov     edx, OFFSET prHiLo
 000000D8  E8 00000000 E	    call    WriteString
 000000DD  E8 00000000 E	    call    Crlf
 000000E2  EB AA		    jmp     getHigher

				    ; start calcs
 000000E4			prepMath:
 000000E4  8B 0D 0000025A R	    mov     ecx, usLowr
 000000EA  49			    dec     ecx                 ; decrement by 1 so that foorloop can include an inc  
 000000EB  8B 1D 0000025E R	    mov     ebx, usHigh         ; exclusive
 000000F1  43			    inc     ebx                 ; inc b/c exclusive
 000000F2  BA 00000000		    mov     edx, 0              ; prep for division
 000000F7  EB 00		    jmp     forLoop

				    ; do while ecx != ebx
 000000F9			forLoop:
 000000F9  E8 00000000 E	    call    crlf
 000000FE  66| C7 05		    mov     flag, 0
	   0000026F R
	   0000

 00000107  41			    inc     ecx
 00000108  3B CB		    cmp     ecx, ebx
 0000010A  0F 84 000000B1	    je      continue

 00000110  8B C1		    mov     eax, ecx
 00000112  E8 00000000 E	    call    WriteDec
 00000117  BA 0000026A R	    mov     edx, OFFSET colon
 0000011C  E8 00000000 E	    call    WriteString
 00000121  B8 00000001		    mov     eax, 1
 00000126  E8 00000000 E	    call    WriteDec
 0000012B  BA 0000026D R	    mov     edx, OFFSET space
 00000130  E8 00000000 E	    call    WriteString

 00000135  C7 05 00000266 R	    mov     loopCt, 2
	   00000002
 0000013F  EB 00		    jmp     innerLoop

				  
				    ; run inner loop
 00000141			innerLoop:
 00000141  39 0D 00000266 R	    cmp     loopCt, ecx           ; while j < i
 00000147  7D 1A		    jge     checkPrime

 00000149  8B C1		    mov     eax, ecx
 0000014B  BA 00000000		    mov     edx, 0
 00000150  F7 35 00000266 R	    div     loopCt

 00000156  83 FA 00		    cmp     edx, 0                 ; check for remainder
 00000159  74 1E		    je      printFactor

 0000015B  FF 05 00000266 R	    inc     loopCt
 00000161  EB DE		    jmp     innerLoop        
				    

				    ;if there were no factors found then the number was prime
 00000163			checkPrime:
 00000163  66| 83 3D		    cmp     flag, 0
	   0000026F R 00
 0000016B  74 31		    je      printPrime
 0000016D  A1 00000266 R	    mov     eax, loopCt
 00000172  E8 00000000 E	    call    WriteDec
 00000177  EB 80		    jmp forLoop


				    ; if no remainder print factor
 00000179			printFactor:
 00000179  66| C7 05		    mov     flag, 1
	   0000026F R
	   0001
 00000182  A1 00000266 R	    mov     eax, loopCt
 00000187  E8 00000000 E	    call    WriteDec
 0000018C  BA 0000026D R	    mov     edx, OFFSET space
 00000191  E8 00000000 E	    call    WriteString

 00000196  FF 05 00000266 R	    inc     loopCt
 0000019C  EB A3		    jmp     innerLoop


 0000019E			printPrime:
				    ; print that number was prime
 0000019E  A1 00000266 R	    mov     eax, loopCt
 000001A3  E8 00000000 E	    call    WriteDec
 000001A8  BA 0000026D R	    mov     edx, OFFSET space
 000001AD  E8 00000000 E	    call    WriteString
 000001B2  BA 000001E3 R	    mov     edx, OFFSET prPrime
 000001B7  E8 00000000 E	    call    WriteString

 000001BC  E9 FFFFFF38		    jmp     forLoop

				    


 000001C1			continue:

 000001C1			endProg:

				    ; from template
				    exit ; exit to operating system
 000001C1  6A 00	   *	    push   +000000000h
 000001C3  E8 00000000 E   *	    call   ExitProcess
 000001C8			main ENDP

				; (insert additional procedures here)
				END main
Microsoft (R) Macro Assembler Version 14.35.32216.1	    02/01/24 15:12:00
Assignment2 (hw2.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000271 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001C8 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001C8 Public STDCALL
  getLower . . . . . . . . . . .	L Near	 0000003C _TEXT	
  lowerTooLow  . . . . . . . . .	L Near	 0000006C _TEXT	
  lowerTooHigh . . . . . . . . .	L Near	 0000007D _TEXT	
  getHigher  . . . . . . . . . .	L Near	 0000008E _TEXT	
  higherTooLow . . . . . . . . .	L Near	 000000C2 _TEXT	
  higherTooHigh  . . . . . . . .	L Near	 000000D3 _TEXT	
  prepMath . . . . . . . . . . .	L Near	 000000E4 _TEXT	
  forLoop  . . . . . . . . . . .	L Near	 000000F9 _TEXT	
  innerLoop  . . . . . . . . . .	L Near	 00000141 _TEXT	
  checkPrime . . . . . . . . . .	L Near	 00000163 _TEXT	
  printFactor  . . . . . . . . .	L Near	 00000179 _TEXT	
  printPrime . . . . . . . . . .	L Near	 0000019E _TEXT	
  continue . . . . . . . . . . .	L Near	 000001C1 _TEXT	
  endProg  . . . . . . . . . . .	L Near	 000001C1 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LIM  . . . . . . . . . . . . . .	Number	 000003E9h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
colon  . . . . . . . . . . . . .	Byte	 0000026A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
flag . . . . . . . . . . . . . .	Word	 0000026F _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 0000001C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
loopCt . . . . . . . . . . . . .	DWord	 00000266 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
prAgain  . . . . . . . . . . . .	Byte	 000001F8 _DATA	
prAgin . . . . . . . . . . . . .	Byte	 0000011E _DATA	
prExit . . . . . . . . . . . . .	Byte	 00000230 _DATA	
prHiLo . . . . . . . . . . . . .	Byte	 00000184 _DATA	
prHigh . . . . . . . . . . . . .	Byte	 000000E5 _DATA	
prLoHi . . . . . . . . . . . . .	Byte	 000001B4 _DATA	
prLoLo . . . . . . . . . . . . .	Byte	 00000155 _DATA	
prLowr . . . . . . . . . . . . .	Byte	 000000AD _DATA	
prName . . . . . . . . . . . . .	Byte	 0000009B _DATA	
prPrime  . . . . . . . . . . . .	Byte	 000001E3 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 0000026D _DATA	
usAgain  . . . . . . . . . . . .	DWord	 00000262 _DATA	
usHigh . . . . . . . . . . . . .	DWord	 0000025E _DATA	
usLowr . . . . . . . . . . . . .	DWord	 0000025A _DATA	
usName . . . . . . . . . . . . .	Byte	 00000239 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
