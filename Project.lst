Microsoft (R) Macro Assembler Version 14.35.32216.1	    03/01/24 15:13:23
Assignment4 (hw4.asm					     Page 1 - 1


				TITLE Assignment4 (hw4.asm)

				; Troy Lopez
				; CS 271 Assignment4 2/28/24
				; generate array of random numbers based on user input
				; then sort and display some stats

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 000000C8			UPPLIM		EQU		200
 = 0000000A			LOWLIM		EQU		10
 = 00000001			ZERO		EQU		1
 = 000003E7			THOUS		EQU		999
 = 000000C8			MAX_SIZE	EQU		200
 = 00000004			FOUR		EQU		4


 00000000			.data
					; variable definitions
					; Notion:
					; prThing prints
					; usThing input

 00000000 48 57 34 3A 20		prIntro1	BYTE	"HW4: Sorting random numbers, by Troy Lopez",0
	   53 6F 72 74 69
	   6E 67 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 2C 20 62
	   79 20 54 72 6F
	   79 20 4C 6F 70
	   65 7A 00
 0000002B 54 68 69 73 20		prIntro2	BYTE	"This generates N numbers in range [lo, hi], and displays, sorts, and displays again. Then, median value is calculated and displahyed.",0
	   67 65 6E 65 72
	   61 74 65 73 20
	   4E 20 6E 75 6D
	   62 65 72 73 20
	   69 6E 20 72 61
	   6E 67 65 20 5B
	   6C 6F 2C 20 68
	   69 5D 2C 20 61
	   6E 64 20 64 69
	   73 70 6C 61 79
	   73 2C 20 73 6F
	   72 74 73 2C 20
	   61 6E 64 20 64
	   69 73 70 6C 61
	   79 73 20 61 67
	   61 69 6E 2E 20
	   54 68 65 6E 2C
	   20 6D 65 64 69
	   61 6E 20 76 61
	   6C 75 65 20 69
	   73 20 63 61 6C
	   63 75 6C 61 74
	   65 64 20 61 6E
	   64 20 64 69 73
	   70 6C 61 68 79
	   65 64 2E 00

 000000B1 48 6F 77 20 6D		prData1		BYTE	"How many numbers should be generated? [10, 200]: ",0
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 6F
	   75 6C 64 20 62
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 3F 20 5B 31
	   30 2C 20 32 30
	   30 5D 3A 20 00
 000000E3 00000045			usNum		DWORD	69
 000000E7 49 6E 76 61 6C		prErr1		BYTE	"Invalid Input, please try again.",0
	   69 64 20 49 6E
	   70 75 74 2C 20
	   70 6C 65 61 73
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 2E 00
 00000108 45 6E 74 65 72		prData2		BYTE	"Enter Lower bound (lo): ",0
	   20 4C 6F 77 65
	   72 20 62 6F 75
	   6E 64 20 28 6C
	   6F 29 3A 20 00
 00000121 000001A4			usLo		DWORD	420
 00000125 45 6E 74 65 72		prData3		BYTE	"Enter Upper bound (hi): ",0
	   20 55 70 70 65
	   72 20 62 6F 75
	   6E 64 20 28 68
	   69 29 3A 20 00
 0000013E 00001CA3			usHi		DWORD	7331

 00000142  000000C8 [			array		DWORD	MAX_SIZE	DUP(?)	;the array, intially full of garbage
	    00000000
	   ]

 00000462 54 68 65 20 75		prArr1		BYTE	"The unsorted random numbers: ",0
	   6E 73 6F 72 74
	   65 64 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 3A 20 00
 00000480 54 68 65 20 73		prArr2		BYTE	"The sorted random numbers:",0
	   6F 72 74 65 64
	   20 72 61 6E 64
	   6F 6D 20 6E 75
	   6D 62 65 72 73
	   3A 00
 0000049B 20 20 20 00			space		BYTE	"   ",0
 0000049F 2E 35 00			pointfive	BYTE	".5",0

 000004A2 00000000			flag		DWORD	0

 000004A6 54 68 65 20 6D		prMed		BYTE	"The median value: ",0
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 3A 20 00

 000004B9 57 6F 75 6C 64		prAgain		BYTE	"Would you like to go again? (y/n)",0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 67 6F
	   20 61 67 61 69
	   6E 3F 20 28 79
	   2F 6E 29 00

 00000000			.code

 00000000			main PROC
 00000000  E8 0000008C			call intro

 00000005  68 000000E3 R		push	OFFSET usNum
 0000000A  68 00000121 R		push	OFFSET usLo
 0000000F  68 0000013E R		Push	OFFSET usHi
 00000014  E8 0000009C			call	getData
					
 00000019  FF 35 00000121 R		Push	usLo
 0000001F  FF 35 0000013E R		Push	usHi
 00000025  68 00000142 R		push	OFFSET	array
 0000002A  FF 35 000000E3 R		push	usNum
 00000030  E8 00000122			call	fillArray

 00000035  FF 35 000000E3 R		Push	usNum
 0000003B  68 00000142 R		Push	OFFSET	array
 00000040  68 00000462 R		Push	OFFSET	prArr1
 00000045  E8 00000130			CALL	printList
 0000004A  E8 00000000 E		CALL	CRLF

 0000004F  FF 35 000004A2 R		Push	flag
 00000055  FF 35 000000E3 R		Push	usNum
 0000005B  68 00000142 R		Push	OFFSET	array
					;CALL	bubbleSort
 00000060  E8 00000190			CALL	sorting
					
 00000065  FF 35 000000E3 R		Push	usNum
 0000006B  68 00000142 R		Push	OFFSET	array
 00000070  68 00000480 R		Push	OFFSET	prArr2
 00000075  E8 00000100			CALL	printList

 0000007A  FF 35 000000E3 R		push	usNum
 00000080  68 00000142 R		push	OFFSET array
 00000085  E8 0000019B			call	median
					exit
 0000008A  6A 00	   *	    push   +000000000h
 0000008C  E8 00000000 E   *	    call   ExitProcess
 00000091			main ENDP

				; print intro
 00000091			intro PROC
 00000091  BA 00000000 R		mov		edx, OFFSET	prIntro1
 00000096  E8 00000000 E		call	WRITESTRING
 0000009B  E8 00000000 E		call	CRLF
 000000A0  BA 0000002B R		mov		edx, OFFSET prIntro2
 000000A5  E8 00000000 E		call	WRITESTRING
 000000AA  E8 00000000 E		call	CRLF
 000000AF  E8 00000000 E		call	CRLF
 000000B4  C3				ret
 000000B5			intro ENDP

 000000B5			getData	PROC
 000000B5  55					PUSH	ebp
 000000B6  8B EC				MOV		ebp, esp	;frame

 000000B8				getNum:
 000000B8  8B 5D 10				mov		ebx, [ebp+16]
 000000BB  BA 000000B1 R			mov		edx, OFFSET	prData1
 000000C0  E8 00000000 E			call	WRITESTRING
 000000C5  E8 00000000 E			call	READINT
 000000CA  89 03				mov		[ebx], eax	;store input in usNum?
						; shitty validation to be improved if I have time
 000000CC  83 F8 0A				cmp		eax, LOWLIM
 000000CF  7C 09				jl		invalidNum
 000000D1  3D 000000C8				cmp		eax, UPPLIM
 000000D6  7F 02				jg		invalidNum

 000000D8  EB 11				jmp		getLo

 000000DA				invalidNum:
 000000DA  BA 000000E7 R			mov		edx, OFFSET prErr1
 000000DF  E8 00000000 E			CALL	WRITESTRING
 000000E4  E8 00000000 E			CALL	CRLF
 000000E9  EB CD				jmp		getNum

 000000EB				getLo:
 000000EB  8B 5D 0C				mov		ebx, [ebp+12]
 000000EE  BA 00000108 R			mov		edx, OFFSET	prData2
 000000F3  E8 00000000 E			call	WRITESTRING
 000000F8  E8 00000000 E			call	READINT
 000000FD  89 03				mov		[ebx], eax	;store input in usNum?
						; shitty validation to be improved if I have time
						
 000000FF  83 F8 01				cmp		eax, ZERO
 00000102  7C 09				jl		invalidLo
 00000104  3D 000003E7				cmp		eax, THOUS
 00000109  7F 02				jg		invalidLo

 0000010B  EB 11				jmp		getHi

 0000010D				invalidLo:
 0000010D  BA 000000E7 R			mov		edx, OFFSET prErr1
 00000112  E8 00000000 E			CALL	WRITESTRING
 00000117  E8 00000000 E			CALL	CRLF
 0000011C  EB CD				jmp		getLo

 0000011E				getHi:
 0000011E  8B 5D 08				mov		ebx, [ebp+8] ; hi, inputted
 00000121  8B 4D 0C				mov		ecx, [ebp+12] ;lo
 00000124  BA 00000125 R			mov		edx, OFFSET	prData3
 00000129  E8 00000000 E			call	WRITESTRING
 0000012E  E8 00000000 E			call	READINT
 00000133  89 03				mov		[ebx], eax	;store input in usNum?
						; shitty validation to be improved if I have time
 00000135  3B 01				cmp		eax,[ecx]
 00000137  7C 09				jl		invalidHi
 00000139  3D 000003E7				cmp		eax, THOUS
 0000013E  7F 02				jg		invalidHi

 00000140  EB 11				jmp		ending

 00000142				invalidHi:
 00000142  BA 000000E7 R			mov		edx, OFFSET prErr1
 00000147  E8 00000000 E			CALL	WRITESTRING
 0000014C  E8 00000000 E			CALL	CRLF
 00000151  EB CB				jmp		getHi

 00000153				ending:
 00000153  5D					pop		ebp
 00000154  C2 000C				ret		12
 00000157			getData		ENDP

 00000157			fillArray	PROC
 00000157  55					PUSH	ebp
 00000158  8B EC				MOV		ebp, esp	;frame

						; get usNum for loop counter
 0000015A  8B 4D 08				mov		ecx, [ebp+8];
						
						;get array into edi
 0000015D  8B 7D 0C				mov		edi, [ebp+12]

 00000160					again:	;the loop
 00000160  8B 45 10					mov		eax, [ebp+16]	;get upper limit
 00000163  2B 45 14					sub		eax, [ebp+20]	;sub low
 00000166  40						inc		eax		; b/c exclusive
 00000167  E8 00000000 E				call	RANDOMRANGE	;[0, eax]
 0000016C  03 45 14					add		eax, [ebp+20]
							; code above this line works and indexes are correct

							; populate array
 0000016F  89 07					mov		[edi], eax
							;CALL	WRITEINT
							;CALL	CRLF
 00000171  83 C7 04					add		edi, 4

 00000174  E2 EA					loop again

 00000176  5D						pop ebp
 00000177  C2 0010					ret	16
 0000017A			fillArray	ENDP

 0000017A			printList	PROC
 0000017A  55					PUSH	ebp
 0000017B  8B EC				MOV		ebp, esp	;frame
						
 0000017D  8B 55 08				mov		edx, [ebp+8]	;title
 00000180  E8 00000000 E			CALL	WRITESTRING
 00000185  E8 00000000 E			CALL	CRLF
						; above works

 0000018A  8B 4D 10				mov		ecx, [ebp+16]	;total items
 0000018D  8B 75 0C				mov		esi, [ebp+12]	;the array

 00000190  BB 00000000				mov		ebx, 0	;line counter


 00000195					again:	;the loop
 00000195  43						inc		ebx
 00000196  83 FB 0B					cmp		ebx, 11
 00000199  74 02					je		newline
 0000019B  EB 0A					jmp		print

 0000019D						newline:
 0000019D  E8 00000000 E					call	CRLF
 000001A2  BB 00000001						mov		ebx, 1

 000001A7						print:
 000001A7  8B 06						mov		eax, [esi]
 000001A9  E8 00000000 E					call	writedec
 000001AE  BA 0000049B R					mov		edx, OFFSET space
 000001B3  E8 00000000 E					call	writestring
 000001B8  83 C6 04						add		esi, 4
 000001BB  E2 D8						loop	again

 000001BD					ending:
 000001BD  5D						pop		ebp
 000001BE  C2 000C					ret		12
 000001C1			printList	ENDP		

				; this is defunct
 000001C1			bubbleSort	PROC

 000001C1  55				PUSH	ebp
 000001C2  8B EC			MOV		ebp, esp
					
 000001C4  8B 7D 08			mov		edi, [ebp+8]


					; flag is stored at +16
					; num is stored at +12
					; array is stored at +8


 000001C7  8B 4D 0C			mov		ecx, [ebp + 12]	; works

 000001CA				outer:
 000001CA  B8 00000000				mov		eax, 0
 000001CF  89 45 10				mov		[ebp + 16], eax		;should work
						
 000001D2  51					push	ecx		; save for loop. outer i is now stored in +4
 000001D3  49					dec		ecx		; start inner loop from one less
 000001D4					inner:
							; if statement goes here
							; i = [ebp - 4]
							; j = ecx
 000001D4  8B 45 FC					mov		eax,	[ebp - 4]
 000001D7  BA 00000004					mov		edx, FOUR
 000001DC  F7 E2					mul		edx
 000001DE  8B D8					mov		ebx, eax		; i is in ebx


 000001E0  8B C1					mov		eax, ecx
 000001E2  BA 00000004					mov		edx, FOUR
 000001E7  F7 E2					mul		edx			; j is in eax

 000001E9  8B 04 07					mov		eax, [edi+eax]
 000001EC  8B 1C 1F					mov		ebx, [edi+ebx]
 000001EF  3B C3					cmp		eax, ebx

 000001F1						swap:
								;stuff goes here
								
 000001F1  E2 E1					loop inner
						;jmp else

						;notswapped:
							; break out of outer
						
						;else:
						;	pop		ecx
						;	loop	outer
							

						

							


 000001F3  5D				pop		ebp
 000001F4  C3				ret
					
 000001F5			bubbleSort	ENDP
							
 000001F5			sorting		PROC
					; flag is stored at +16
					; num is stored at +12
					; array is stored at +8
 000001F5  55				push	ebp
 000001F6  8B EC			mov		ebp, esp

 000001F8  8B 45 0C			mov		eax, [ebp+12]
 000001FB  8B C8			mov		ecx, eax		; put user num in loop counter for outer loop

 000001FD  8B 75 08			mov		esi, [ebp+8]	; put array in esi

 00000200  49				dec		ecx		; start from 1 in from end

 00000201				outer:
 00000201  51					push	ecx		;save for later
 00000202  8B 4D 0C				mov		ecx, [ebp+12]	;get user num again
 00000205  8B 75 08				mov		esi, [ebp+8]	; load arr again from start

 00000208					inner:
 00000208  8B 06					mov		eax, [esi]		;arr to esi
 0000020A  39 46 04					cmp		[esi+4], eax	;check against next index
 0000020D  7C 0A					jl		contd	; don''t swap
							; swap goes here
 0000020F  8B 06					mov		eax, [esi]
 00000211  8B 5E 04					mov		ebx, [esi+4]
 00000214  89 1E					mov		[esi], ebx
 00000216  89 46 04					mov		[esi+4], eax

 00000219						contd:
 00000219  83 C6 04						add		esi, 4
 0000021C  E2 EA						loop	inner
 0000021E  59							pop		ecx		; restore outer loop
 0000021F  E2 E0						loop	outer

 00000221  5D				pop		ebp
 00000222  C2 000C			ret		12
 00000225			sorting endp

 00000225			median	proc
 00000225  55				push	ebp
 00000226  8B EC			mov		ebp, esp

					; array is 8
					; size is 12

 00000228  8B 45 0C			mov		eax, [ebp+12]	;l size to eax
 0000022B  8B 75 08			mov		esi, [ebp+8]	; put array in esi

 0000022E  BA 00000000			mov		edx, 0

 00000233  BB 00000002			mov		ebx, 2
 00000238  F7 F3			div		ebx	;eax / 2
 0000023A  83 FA 01			cmp		edx, 1	;remainder
 0000023D  74 02			je		oddd
 0000023F  EB 16			jmp		evenn

 00000241				oddd:	
						; target is in eax
 00000241  BB 00000004				mov		ebx, four
 00000246  F7 E3				mul		ebx
 00000248  E8 00000000 E			call	crlf
 0000024D  8B 04 06				mov		eax,  [esi + eax]
 00000250  E8 00000000 E			call	writedec
 00000255  EB 48				jmp		outside
 00000257				evenn:
						; target is in eax
 00000257  48					dec		eax		; step into middle
 00000258  BB 00000004				mov		ebx, four
 0000025D  F7 E3				mul		ebx
 0000025F  8B D8				mov		ebx, eax
 00000261  E8 00000000 E			call	crlf
 00000266  8B 04 1E				mov		eax,  [esi + ebx]
 00000269  83 C3 04				add		ebx, four
 0000026C  03 04 1E				add		eax, [esi + ebx]	;get next as well
 0000026F  BB 00000002				mov		ebx, 2
 00000274  F7 F3				div		ebx	; mean of 2 closest to median in eax, but may need a .5
 00000276  83 FA 01				cmp		edx, 1	;remainder
 00000279  74 02				je		addfive
 0000027B  EB 16				jmp		print

 0000027D					addfive:
 0000027D  E8 00000000 E				call	crlf
 00000282  E8 00000000 E				call	writedec
 00000287  BA 0000049F R				mov		edx, OFFSET	pointfive
 0000028C  E8 00000000 E				call	writestring
 00000291  EB 0C					jmp		outside

 00000293					print:
 00000293  E8 00000000 E				call	crlf
 00000298  E8 00000000 E				call	writedec
 0000029D  EB 00					jmp		outside

 0000029F				outside:
 0000029F  5D					pop		ebp
 000002A0  C3					ret

						
						
					
 000002A1  C3				ret
 000002A2			median	endp

				END main
Microsoft (R) Macro Assembler Version 14.35.32216.1	    03/01/24 15:13:23
Assignment4 (hw4.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004DB Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002A2 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
bubbleSort . . . . . . . . . . .	P Near	 000001C1 _TEXT	Length= 00000034 Public STDCALL
  outer  . . . . . . . . . . . .	L Near	 000001CA _TEXT	
  inner  . . . . . . . . . . . .	L Near	 000001D4 _TEXT	
  swap . . . . . . . . . . . . .	L Near	 000001F1 _TEXT	
fillArray  . . . . . . . . . . .	P Near	 00000157 _TEXT	Length= 00000023 Public STDCALL
  again  . . . . . . . . . . . .	L Near	 00000160 _TEXT	
getData  . . . . . . . . . . . .	P Near	 000000B5 _TEXT	Length= 000000A2 Public STDCALL
  getNum . . . . . . . . . . . .	L Near	 000000B8 _TEXT	
  invalidNum . . . . . . . . . .	L Near	 000000DA _TEXT	
  getLo  . . . . . . . . . . . .	L Near	 000000EB _TEXT	
  invalidLo  . . . . . . . . . .	L Near	 0000010D _TEXT	
  getHi  . . . . . . . . . . . .	L Near	 0000011E _TEXT	
  invalidHi  . . . . . . . . . .	L Near	 00000142 _TEXT	
  ending . . . . . . . . . . . .	L Near	 00000153 _TEXT	
intro  . . . . . . . . . . . . .	P Near	 00000091 _TEXT	Length= 00000024 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000091 Public STDCALL
median . . . . . . . . . . . . .	P Near	 00000225 _TEXT	Length= 0000007D Public STDCALL
  oddd . . . . . . . . . . . . .	L Near	 00000241 _TEXT	
  evenn  . . . . . . . . . . . .	L Near	 00000257 _TEXT	
  addfive  . . . . . . . . . . .	L Near	 0000027D _TEXT	
  print  . . . . . . . . . . . .	L Near	 00000293 _TEXT	
  outside  . . . . . . . . . . .	L Near	 0000029F _TEXT	
printList  . . . . . . . . . . .	P Near	 0000017A _TEXT	Length= 00000047 Public STDCALL
  again  . . . . . . . . . . . .	L Near	 00000195 _TEXT	
  newline  . . . . . . . . . . .	L Near	 0000019D _TEXT	
  print  . . . . . . . . . . . .	L Near	 000001A7 _TEXT	
  ending . . . . . . . . . . . .	L Near	 000001BD _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sorting  . . . . . . . . . . . .	P Near	 000001F5 _TEXT	Length= 00000030 Public STDCALL
  outer  . . . . . . . . . . . .	L Near	 00000201 _TEXT	
  inner  . . . . . . . . . . . .	L Near	 00000208 _TEXT	
  contd  . . . . . . . . . . . .	L Near	 00000219 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FOUR . . . . . . . . . . . . . .	Number	 00000004h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOWLIM . . . . . . . . . . . . .	Number	 0000000Ah   
MAX_SIZE . . . . . . . . . . . .	Number	 000000C8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
THOUS  . . . . . . . . . . . . .	Number	 000003E7h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UPPLIM . . . . . . . . . . . . .	Number	 000000C8h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ZERO . . . . . . . . . . . . . .	Number	 00000001h   
array  . . . . . . . . . . . . .	DWord	 00000142 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
flag . . . . . . . . . . . . . .	DWord	 000004A2 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
pointfive  . . . . . . . . . . .	Byte	 0000049F _DATA	
prAgain  . . . . . . . . . . . .	Byte	 000004B9 _DATA	
prArr1 . . . . . . . . . . . . .	Byte	 00000462 _DATA	
prArr2 . . . . . . . . . . . . .	Byte	 00000480 _DATA	
prData1  . . . . . . . . . . . .	Byte	 000000B1 _DATA	
prData2  . . . . . . . . . . . .	Byte	 00000108 _DATA	
prData3  . . . . . . . . . . . .	Byte	 00000125 _DATA	
prErr1 . . . . . . . . . . . . .	Byte	 000000E7 _DATA	
prIntro1 . . . . . . . . . . . .	Byte	 00000000 _DATA	
prIntro2 . . . . . . . . . . . .	Byte	 0000002B _DATA	
prMed  . . . . . . . . . . . . .	Byte	 000004A6 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 0000049B _DATA	
usHi . . . . . . . . . . . . . .	DWord	 0000013E _DATA	
usLo . . . . . . . . . . . . . .	DWord	 00000121 _DATA	
usNum  . . . . . . . . . . . . .	DWord	 000000E3 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
